{"ast":null,"code":"var _jsxFileName = \"/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Results.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst emptyResults = /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"results\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"results-heading\",\n    children: \"Results\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-window\",\n    children: \"Click on an algorithm to get started!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\nconst resultsToText = (result, algorithm) => {\n  const separator = \"----------\";\n\n  switch (algorithm) {\n    case \"bfs\":\n      let bfsString = [];\n      var frontierCount = 0;\n      bfsString.push(`Source Node: Node${result[0][0]}`);\n      result.forEach(frontier => {\n        frontier = frontier.sort(function (a, b) {\n          return a - b;\n        });\n        let currString = `Frontier ${frontierCount++}: `;\n        frontier.forEach(node => currString += `Node${node}, `);\n        currString = currString.slice(0, currString.lastIndexOf(\",\")); // slice off last \", \"\n\n        bfsString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"- \", currString, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)]\n        }, frontierCount, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this));\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"BFS\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), bfsString]\n      }, void 0, true);\n\n    case \"dfs\":\n      let dfsString = [];\n      result.forEach(node => dfsString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"- Node\", node, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, node, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)));\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"DFS\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), \"Order of Nodes Visited:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), dfsString]\n      }, void 0, true);\n\n    case \"dijkstra\":\n      let dijkstraString = [];\n      result.forEach(({\n        node,\n        distance\n      }) => {\n        dijkstraString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"- Node\", node, \": \", distance, \" units\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, `Node${node}: ${distance} units`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this));\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Dijkstra\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), \"Shortest distances from Node\", result[0].node, \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), dijkstraString]\n      }, void 0, true);\n\n    case \"topo sort\":\n      let topoString = [];\n\n      if (!result.valid) {\n        topoString.push(\"No valid topo sort, graph cannot have cycle.\");\n      } else {\n        topoString.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"One potential ordering:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true));\n        result.res.forEach(node => {\n          topoString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"- Node\", node, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, node, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this));\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Topological Sort\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), topoString]\n      }, void 0, true);\n\n    case \"clustering\":\n      let clusteringString = [];\n      result.forEach(({\n        node,\n        cc\n      }) => {\n        clusteringString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"- Node\", node, \": \", cc.toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, node, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this));\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Clustering Coefficient\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), clusteringString]\n      }, void 0, true);\n\n    case \"bridges\":\n      let bridgesString = [];\n\n      if (result.size === 0) {\n        bridgesString.push(\"No global bridges found.\");\n      } else {\n        bridgesString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Global Bridges:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this));\n        result.forEach(({\n          node1,\n          node2\n        }) => {\n          bridgesString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"- Node\", node1, \" \", \"<->\", \" Node\", node2, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, `Node${node1} -> Node${node2}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this));\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Global Bridges\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), bridgesString]\n      }, void 0, true);\n\n    case \"triadic\":\n      let triadicString = [];\n\n      if (result.size === 0) {\n        triadicString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"No new edges would be formed due to Triadic Closure.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this));\n      } else {\n        triadicString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"New Edges Formed due to Triadic Closure:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this));\n        result.forEach(({\n          NodeA,\n          NodeB\n        }) => {\n          triadicString.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"- Node\", NodeA, \" \", \"->\", \" Node\", NodeB, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)]\n          }, `Node${NodeA} -> Node${NodeB}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this));\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Triadic Closure\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), separator, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), triadicString]\n      }, void 0, true);\n\n    default:\n      return \"\";\n  }\n};\n\nconst Results = ({\n  result,\n  algorithm\n}) => {\n  const emptyCondition = result === undefined || algorithm === undefined || algorithm === \"\";\n  return emptyCondition ? emptyResults : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"results-heading\",\n      children: \"Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-window\",\n      children: resultsToText(result, algorithm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Results.jsx"],"names":["React","emptyResults","resultsToText","result","algorithm","separator","bfsString","frontierCount","push","forEach","frontier","sort","a","b","currString","node","slice","lastIndexOf","dfsString","dijkstraString","distance","topoString","valid","res","clusteringString","cc","toFixed","bridgesString","size","node1","node2","triadicString","NodeA","NodeB","Results","emptyCondition","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst emptyResults = (\n  <div className=\"results\">\n    <h2 className=\"results-heading\">Results</h2>\n    <div className=\"output-window\">Click on an algorithm to get started!</div>\n  </div>\n);\n\nconst resultsToText = (result, algorithm) => {\n  const separator = \"----------\";\n  switch (algorithm) {\n    case \"bfs\":\n      let bfsString = [];\n      var frontierCount = 0;\n      bfsString.push(`Source Node: Node${result[0][0]}`);\n      result.forEach((frontier) => {\n        frontier = frontier.sort(function (a, b) {\n          return a - b;\n        });\n        let currString = `Frontier ${frontierCount++}: `;\n        frontier.forEach((node) => (currString += `Node${node}, `));\n        currString = currString.slice(0, currString.lastIndexOf(\",\")); // slice off last \", \"\n        bfsString.push(\n          <div key={frontierCount}>\n            - {currString}\n            <br />\n          </div>\n        );\n      });\n      return (\n        <>\n          BFS\n          <br />\n          {separator}\n          <br />\n          {bfsString}\n        </>\n      );\n    case \"dfs\":\n      let dfsString = [];\n      result.forEach((node) =>\n        dfsString.push(\n          <div key={node}>\n            - Node{node}\n            <br />\n          </div>\n        )\n      );\n      return (\n        <>\n          DFS\n          <br />\n          {separator}\n          <br />\n          Order of Nodes Visited:\n          <br />\n          {dfsString}\n        </>\n      );\n    case \"dijkstra\":\n      let dijkstraString = [];\n      result.forEach(({ node, distance }) => {\n        dijkstraString.push(\n          <div key={`Node${node}: ${distance} units`}>\n            - Node{node}: {distance} units\n            <br />\n          </div>\n        );\n      });\n      return (\n        <>\n          Dijkstra\n          <br />\n          {separator}\n          <br />\n          Shortest distances from Node{result[0].node}:\n          <br />\n          {dijkstraString}\n        </>\n      );\n    case \"topo sort\":\n      let topoString = [];\n      if (!result.valid) {\n        topoString.push(\"No valid topo sort, graph cannot have cycle.\");\n      } else {\n        topoString.push(\n          <>\n            One potential ordering:\n            <br />\n          </>\n        );\n        result.res.forEach((node) => {\n          topoString.push(\n            <div key={node}>\n              - Node{node}\n              <br />\n            </div>\n          );\n        });\n      }\n      return (\n        <>\n          Topological Sort\n          <br />\n          {separator}\n          <br />\n          {topoString}\n        </>\n      );\n    case \"clustering\":\n      let clusteringString = [];\n      result.forEach(({ node, cc }) => {\n        clusteringString.push(\n          <div key={node}>\n            - Node{node}: {cc.toFixed(2)}\n            <br />\n          </div>\n        );\n      });\n      return (\n        <>\n          Clustering Coefficient\n          <br />\n          {separator}\n          <br />\n          {clusteringString}\n        </>\n      );\n    case \"bridges\":\n      let bridgesString = [];\n      if (result.size === 0) {\n        bridgesString.push(\"No global bridges found.\");\n      } else {\n        bridgesString.push(\n          <div>\n            Global Bridges:\n            <br />\n          </div>\n        );\n        result.forEach(({ node1, node2 }) => {\n          bridgesString.push(\n            <div key={`Node${node1} -> Node${node2}`}>\n              - Node{node1} {\"<->\"} Node{node2}\n              <br />\n            </div>\n          );\n        });\n      }\n      return (\n        <>\n          Global Bridges\n          <br />\n          {separator}\n          <br />\n          {bridgesString}\n        </>\n      );\n    case \"triadic\":\n      let triadicString = [];\n      if (result.size === 0) {\n        triadicString.push(\n          <div>\n            No new edges would be formed due to Triadic Closure.\n            <br />\n          </div>\n        );\n      } else {\n        triadicString.push(\n          <div>\n            New Edges Formed due to Triadic Closure:\n            <br />\n          </div>\n        );\n        result.forEach(({ NodeA, NodeB }) => {\n          triadicString.push(\n            <div key={`Node${NodeA} -> Node${NodeB}`}>\n              - Node{NodeA} {\"->\"} Node{NodeB}\n              <br />\n            </div>\n          );\n        });\n      }\n      return (\n        <>\n          Triadic Closure\n          <br />\n          {separator}\n          <br />\n          {triadicString}\n        </>\n      );\n    default:\n      return \"\";\n  }\n};\n\nconst Results = ({ result, algorithm }) => {\n  const emptyCondition =\n    result === undefined || algorithm === undefined || algorithm === \"\";\n  return emptyCondition ? (\n    emptyResults\n  ) : (\n    <div className=\"results\">\n      <h2 className=\"results-heading\">Results</h2>\n      <div className=\"output-window\">{resultsToText(result, algorithm)}</div>\n    </div>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}