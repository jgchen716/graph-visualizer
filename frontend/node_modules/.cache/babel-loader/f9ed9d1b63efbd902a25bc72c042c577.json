{"ast":null,"code":"var _jsxFileName = \"/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Graph.jsx\";\nimport React, { Component } from \"react\";\nimport Draggable from \"react-draggable\"; // Both at the same time\n\nimport Xarrow from \"react-xarrows\";\nimport Results from \"./Results\";\nimport bfs from \"../algos/bfs\";\nimport bridges from \"../algos/bridges\";\nimport clusteringCoefficient from \"../algos/clusteringCoefficient\";\nimport dfs from \"../algos/dfs\";\nimport dijkstra from \"../algos/dijkstra\";\nimport topoSort from \"../algos/topoSort\";\nimport triadicClosure from \"../algos/triadicClosure\"; // dimensions for nodes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 62.5; // styles for drawing nodes\n\nconst circleStyle = (selected, x, y) => {\n  return {\n    padding: 0,\n    margin: 10,\n    position: \"absolute\",\n    backgroundColor: selected ? \"#ffd3b4\" : \"#98ddca\",\n    borderRadius: \"50%\",\n    border: \"2px solid black\",\n    width: DIM,\n    height: DIM,\n    lineHeight: `${DIM}px`,\n    left: `${x - DIM / 2}px`,\n    top: `${y - DIM / 2}px`,\n    outlineWidth: 0\n  };\n}; // toggles color of edges if selected\n\n\nconst edgeColor = selected => {\n  return selected ? \"#ffd3b4\" : \"#98ddca\";\n}; // initial state for graph canvas\n\n\nconst initialState = props => {\n  return {\n    nextId: 0,\n    selectedId: -1,\n    selectedEdge: {\n      a: -1,\n      b: -1\n    },\n    undirected: props.selectedType === \"undirected\",\n    unweighted: props.selectedWeight === \"unweighted\",\n    algorithm: props.algorithm,\n    cleared: props.cleared,\n    results: props.result ? props.result : \"\",\n    open: false\n  };\n};\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props); // maps node to object with node as key and edge weight as value\n\n    this.getClickCoords = event => {\n      // from: https://stackoverflow.com/a/29296049/14198287\n      var e = event.target;\n      var dim = e.getBoundingClientRect();\n      var x = event.clientX - dim.left;\n      var y = event.clientY - dim.top;\n      return [x, y];\n    };\n\n    this.addNode = (e, id) => {\n      if (!this.adjList.has(id)) {\n        this.adjList.set(id, []);\n        const [x, y] = this.getClickCoords(e);\n        this.nodeToElement.set(id, () => /*#__PURE__*/_jsxDEV(Draggable, {\n          bounds: \"parent\",\n          onDrag: (e, ui) => {\n            this.setState({\n              changed: true\n            });\n            this.forceUpdate();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            tabIndex: \"1\",\n            onKeyDown: e => {\n              if (e.key === \"Backspace\" || e.key === \"Delete\") {\n                this.removeNode(id);\n              }\n            },\n            style: circleStyle(this.state.selectedId === id, x, y),\n            onClick: e => {\n              if (e.shiftKey) {\n                this.addEdge(this.state.selectedId, id, 1);\n              } else {\n                this.selectNode(e, id);\n              }\n\n              this.forceUpdate();\n            },\n            className: `Node${id}`,\n            id: `Node${id}`,\n            children: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this));\n        this.setState({\n          selectedId: id\n        }, () => {\n          this.forceUpdate();\n        });\n      }\n\n      return this;\n    };\n\n    this.removeNode = id => {\n      // remove from lists of neighbors\n      this.adjList.forEach((neighbors, node) => {\n        this.adjList.set(node, neighbors.filter(val => val !== id)); // remove entry in adjacency list\n\n        this.adjList.delete(id);\n        this.nodeToElement.delete(id);\n      });\n      this.forceUpdate();\n      return this;\n    };\n\n    this.addEdge = (outNode, inNode, weight) => {\n      if (this.adjList.has(outNode) && this.adjList.has(inNode)) {\n        this.adjList.set(outNode, [...this.adjList.get(outNode).filter(obj => obj.node !== inNode), {\n          node: inNode,\n          weight: weight\n        }]);\n\n        if (this.state.undirected) {\n          this.adjList.set(inNode, [...this.adjList.get(inNode).filter(obj => obj.node !== outNode), {\n            node: outNode,\n            weight: weight\n          }]);\n        }\n\n        this.setState({\n          changed: true,\n          selectedId: inNode\n        }, () => {\n          this.shouldComponentUpdate({\n            cleared: this.state.cleared,\n            selectedType: this.state.undirected ? \"undirected\" : \"directed\",\n            selectedWeight: this.state.unweighted ? \"unweighted\" : \"weighted\",\n            selectedAlgorithm: this.state.algorithm\n          });\n        });\n      }\n\n      this.forceUpdate();\n      return this;\n    };\n\n    this.removeEdge = (outNode, inNode) => {\n      if (this.adjList.has(outNode)) {\n        this.adjList.set(outNode, this.adjList.get(outNode).filter(obj => obj.node !== inNode));\n\n        if (this.state.undirected) {\n          this.adjList.set(inNode, this.adjList.get(inNode).filter(obj => obj.node !== outNode));\n        }\n      }\n\n      this.forceUpdate();\n      return this;\n    };\n\n    this.selectNode = (e, id) => {\n      this.setState({\n        selectedId: id,\n        selectedEdge: {\n          a: -1,\n          b: -1\n        },\n        changed: true\n      }, () => {\n        this.shouldComponentUpdate({\n          cleared: this.state.cleared,\n          selectedType: this.state.undirected ? \"undirected\" : \"directed\",\n          selectedWeight: this.state.unweighted ? \"unweighted\" : \"weighted\",\n          selectedAlgorithm: this.state.algorithm\n        });\n      });\n      this.forceUpdate();\n      e.stopPropagation();\n    };\n\n    this.adjList = new Map();\n    this.nodeToElement = new Map(); // set initial state\n\n    this.state = initialState(props);\n    this.getClickCoords = this.getClickCoords.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.selectNode = this.selectNode.bind(this);\n    this.addEdge = this.addEdge.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // condition to updated weight and directionality\n    let updated = false;\n\n    if (nextProps.selectedType === \"undirected\" !== this.state.undirected || nextProps.selectedWeight === \"unweighted\" !== this.state.unweighted) {\n      if (nextProps.selectedType === \"undirected\" !== this.state.undirected && !this.state.undirected) {\n        this.adjList.forEach((neighbors, id) => {\n          neighbors.forEach(({\n            node,\n            weight\n          }) => {\n            this.addEdge(node, id, weight);\n          });\n        });\n      }\n\n      this.setState({\n        undirected: nextProps.selectedType === \"undirected\",\n        unweighted: nextProps.selectedWeight === \"unweighted\"\n      });\n      updated = true;\n    } // condition to update clear\n\n\n    if (this.state.cleared !== nextProps.cleared) {\n      this.adjList = new Map();\n      this.nodeToElement = new Map();\n      this.setState(initialState(nextProps));\n      updated = true;\n    } // condition to run algorithm\n\n\n    if (this.state.algorithm !== nextProps.selectedAlgorithm || this.state.changed) {\n      let result;\n\n      switch (nextProps.selectedAlgorithm) {\n        case \"bfs\":\n          // run bfs\n          if (this.state.selectedId >= 0) {\n            result = bfs(this, this.state.selectedId);\n          }\n\n          break;\n\n        case \"dfs\":\n          // run dfs\n          if (this.state.selectedId >= 0) {\n            result = dfs(this, this.state.selectedId);\n          }\n\n          break;\n\n        case \"dijkstra\":\n          // run dijkstra\n          if (this.state.selectedId >= 0) {\n            result = dijkstra(this, this.state.selectedId);\n          }\n\n          break;\n\n        case \"topo sort\":\n          // run topo sort\n          result = topoSort(this);\n          break;\n\n        case \"clustering\":\n          // run clustering\n          if (this.state.selectedId >= 0) {\n            result = clusteringCoefficient(this, this.state.selectedId);\n          }\n\n          break;\n\n        case \"bridges\":\n          // run bridges\n          result = bridges(this);\n          break;\n\n        case \"triadic\":\n          // run triadic\n          result = triadicClosure(this);\n          break;\n\n        default:\n          break;\n      } // update state based on current algorithm and result\n\n\n      this.setState({\n        results: result,\n        algorithm: nextProps.selectedAlgorithm,\n        changed: false\n      });\n      this.forceUpdate();\n      updated = true;\n    }\n\n    return updated;\n  } // get mouse click coordinates\n\n\n  render() {\n    const nodes = [];\n    const it = this.nodeToElement.values();\n    let res = it.next();\n\n    while (!res.done) {\n      nodes.push(res.value());\n      res = it.next();\n    }\n\n    const edges = [];\n    const drawnEdges = [];\n    this.adjList.forEach((neighbors, id) => {\n      neighbors.forEach(neighbor => {\n        if (!this.state.undirected || !drawnEdges.some(({\n          inNode,\n          outNode\n        }) => inNode === neighbor.node && outNode === id)) {\n          drawnEdges.push({\n            inNode: id,\n            outNode: neighbor.node\n          });\n          edges.push( /*#__PURE__*/_jsxDEV(Xarrow, {\n            start: `Node${id}`,\n            end: `Node${neighbor.node}`,\n            label: !this.state.unweighted ? `${neighbor.weight}` : \"\",\n            showHead: !this.state.undirected,\n            color: edgeColor(this.state.selectedEdge.a === id && this.state.selectedEdge.b === neighbor.node),\n            strokeWidth: 5,\n            onClick: e => {\n              this.setState({\n                selectedId: -1,\n                selectedEdge: {\n                  a: id,\n                  b: neighbor.node\n                }\n              });\n              e.stopPropagation();\n              this.forceUpdate();\n            },\n            tabIndex: \"1\",\n            onKeyDown: e => {\n              if (e.key === \"Backspace\" || e.key === \"Delete\") {\n                this.removeEdge(id, neighbor.node);\n                this.setState({\n                  selectedEdge: {\n                    a: -1,\n                    b: -1\n                  }\n                });\n              } else if (e.key === \"Enter\") {\n                this.removeEdge(id, neighbor.node);\n                this.addEdge(id, neighbor.node, 0);\n              } else if (e.key === \"0\" || e.key === \"1\" || e.key === \"2\" || e.key === \"3\" || e.key === \"4\" || e.key === \"5\" || e.key === \"6\" || e.key === \"7\" || e.key === \"8\" || e.key === \"9\") {\n                let edgeWeight = 1;\n                this.adjList.get(id).forEach(({\n                  node,\n                  weight\n                }) => edgeWeight = node === neighbor.node ? weight : edgeWeight);\n                this.removeEdge(id, neighbor.node);\n                this.addEdge(id, neighbor.node, edgeWeight * 10 + parseInt(e.key));\n                this.forceUpdate();\n              }\n\n              this.setState({\n                changed: true\n              });\n            }\n          }, `Node${id}-Node${neighbor.node}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this));\n        }\n      });\n    });\n    const dottedEdges = [];\n    const drawnDottedEdges = [];\n\n    if (this.state.algorithm === \"triadic\") {\n      this.state.results.forEach(({\n        NodeA,\n        NodeB\n      }) => {\n        if (!this.state.undirected || !drawnDottedEdges.some(({\n          inNode,\n          outNode\n        }) => inNode === NodeB && outNode === NodeA)) {\n          drawnDottedEdges.push({\n            inNode: NodeA,\n            outNode: NodeB\n          });\n          dottedEdges.push( /*#__PURE__*/_jsxDEV(Xarrow, {\n            start: `Node${NodeA}`,\n            end: `Node${NodeB}`,\n            label: \"\",\n            showHead: !this.state.undirected,\n            color: \"#98ddca\",\n            strokeWidth: 5,\n            dashness: {\n              strokeLen: 10,\n              nonStrokeLen: 10\n            }\n          }, `Node${NodeA}-Node${NodeB}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this));\n        }\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => {\n        this.setState({\n          selectedId: -1,\n          selectedEdge: {\n            a: -1,\n            b: -1\n          } //\n\n        });\n        this.forceUpdate();\n      },\n      onDoubleClick: e => {\n        if (this.state.selectedId < 0 && this.state.selectedEdge.a === -1 && this.state.selectedEdge.b === -1) {\n          this.addNode(e, this.state.nextId);\n          this.setState({\n            nextId: this.state.nextId + 1,\n            selectedEdge: {\n              a: -1,\n              b: -1\n            }\n          });\n          this.forceUpdate();\n        }\n      },\n      className: \"canvas\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph\",\n        children: [dottedEdges, edges, nodes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Results, {\n        result: this.state.results,\n        algorithm: this.state.algorithm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Graph.jsx"],"names":["React","Component","Draggable","Xarrow","Results","bfs","bridges","clusteringCoefficient","dfs","dijkstra","topoSort","triadicClosure","DIM","circleStyle","selected","x","y","padding","margin","position","backgroundColor","borderRadius","border","width","height","lineHeight","left","top","outlineWidth","edgeColor","initialState","props","nextId","selectedId","selectedEdge","a","b","undirected","selectedType","unweighted","selectedWeight","algorithm","cleared","results","result","open","Graph","constructor","getClickCoords","event","e","target","dim","getBoundingClientRect","clientX","clientY","addNode","id","adjList","has","set","nodeToElement","ui","setState","changed","forceUpdate","key","removeNode","state","shiftKey","addEdge","selectNode","forEach","neighbors","node","filter","val","delete","outNode","inNode","weight","get","obj","shouldComponentUpdate","selectedAlgorithm","removeEdge","stopPropagation","Map","bind","nextProps","updated","render","nodes","it","values","res","next","done","push","value","edges","drawnEdges","neighbor","some","edgeWeight","parseInt","dottedEdges","drawnDottedEdges","NodeA","NodeB","strokeLen","nonStrokeLen"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Draggable from \"react-draggable\"; // Both at the same time\nimport Xarrow from \"react-xarrows\";\nimport Results from \"./Results\";\n\nimport bfs from \"../algos/bfs\";\nimport bridges from \"../algos/bridges\";\nimport clusteringCoefficient from \"../algos/clusteringCoefficient\";\nimport dfs from \"../algos/dfs\";\nimport dijkstra from \"../algos/dijkstra\";\nimport topoSort from \"../algos/topoSort\";\nimport triadicClosure from \"../algos/triadicClosure\";\n\n// dimensions for nodes\nconst DIM = 62.5;\n\n// styles for drawing nodes\nconst circleStyle = (selected, x, y) => {\n  return {\n    padding: 0,\n    margin: 10,\n    position: \"absolute\",\n    backgroundColor: selected ? \"#ffd3b4\" : \"#98ddca\",\n    borderRadius: \"50%\",\n    border: \"2px solid black\",\n    width: DIM,\n    height: DIM,\n    lineHeight: `${DIM}px`,\n    left: `${x - DIM / 2}px`,\n    top: `${y - DIM / 2}px`,\n    outlineWidth: 0,\n  };\n};\n\n// toggles color of edges if selected\nconst edgeColor = (selected) => {\n  return selected ? \"#ffd3b4\" : \"#98ddca\";\n};\n\n// initial state for graph canvas\nconst initialState = (props) => {\n  return {\n    nextId: 0,\n    selectedId: -1,\n    selectedEdge: { a: -1, b: -1 },\n    undirected: props.selectedType === \"undirected\",\n    unweighted: props.selectedWeight === \"unweighted\",\n    algorithm: props.algorithm,\n    cleared: props.cleared,\n    results: props.result ? props.result : \"\",\n    open: false,\n  };\n};\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    // maps node to object with node as key and edge weight as value\n    this.adjList = new Map();\n    this.nodeToElement = new Map();\n    // set initial state\n    this.state = initialState(props);\n\n    this.getClickCoords = this.getClickCoords.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.selectNode = this.selectNode.bind(this);\n    this.addEdge = this.addEdge.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // condition to updated weight and directionality\n    let updated = false;\n    if (\n      (nextProps.selectedType === \"undirected\") !== this.state.undirected ||\n      (nextProps.selectedWeight === \"unweighted\") !== this.state.unweighted\n    ) {\n      if (\n        (nextProps.selectedType === \"undirected\") !== this.state.undirected &&\n        !this.state.undirected\n      ) {\n        this.adjList.forEach((neighbors, id) => {\n          neighbors.forEach(({ node, weight }) => {\n            this.addEdge(node, id, weight);\n          });\n        });\n      }\n      this.setState({\n        undirected: nextProps.selectedType === \"undirected\",\n        unweighted: nextProps.selectedWeight === \"unweighted\",\n      });\n      updated = true;\n    }\n\n    // condition to update clear\n    if (this.state.cleared !== nextProps.cleared) {\n      this.adjList = new Map();\n      this.nodeToElement = new Map();\n      this.setState(initialState(nextProps));\n      updated = true;\n    }\n\n    // condition to run algorithm\n    if (\n      this.state.algorithm !== nextProps.selectedAlgorithm ||\n      this.state.changed\n    ) {\n      let result;\n      switch (nextProps.selectedAlgorithm) {\n        case \"bfs\":\n          // run bfs\n          if (this.state.selectedId >= 0) {\n            result = bfs(this, this.state.selectedId);\n          }\n          break;\n        case \"dfs\":\n          // run dfs\n          if (this.state.selectedId >= 0) {\n            result = dfs(this, this.state.selectedId);\n          }\n          break;\n        case \"dijkstra\":\n          // run dijkstra\n          if (this.state.selectedId >= 0) {\n            result = dijkstra(this, this.state.selectedId);\n          }\n          break;\n        case \"topo sort\":\n          // run topo sort\n          result = topoSort(this);\n          break;\n        case \"clustering\":\n          // run clustering\n          if (this.state.selectedId >= 0) {\n            result = clusteringCoefficient(this, this.state.selectedId);\n          }\n          break;\n        case \"bridges\":\n          // run bridges\n          result = bridges(this);\n          break;\n        case \"triadic\":\n          // run triadic\n          result = triadicClosure(this);\n          break;\n        default:\n          break;\n      }\n      // update state based on current algorithm and result\n      this.setState({\n        results: result,\n        algorithm: nextProps.selectedAlgorithm,\n        changed: false,\n      });\n      this.forceUpdate();\n      updated = true;\n    }\n    return updated;\n  }\n\n  // get mouse click coordinates\n  getClickCoords = (event) => {\n    // from: https://stackoverflow.com/a/29296049/14198287\n    var e = event.target;\n    var dim = e.getBoundingClientRect();\n    var x = event.clientX - dim.left;\n    var y = event.clientY - dim.top;\n    return [x, y];\n  };\n\n  // adds a node to the graph, if it doesn't already exist\n  // does nothing if node already in graph\n  addNode = (e, id) => {\n    if (!this.adjList.has(id)) {\n      this.adjList.set(id, []);\n\n      const [x, y] = this.getClickCoords(e);\n      this.nodeToElement.set(id, () => (\n        <Draggable\n          bounds=\"parent\"\n          key={id}\n          onDrag={(e, ui) => {\n            this.setState({ changed: true });\n            this.forceUpdate();\n          }}\n        >\n          <div\n            tabIndex=\"1\"\n            onKeyDown={(e) => {\n              if (e.key === \"Backspace\" || e.key === \"Delete\") {\n                this.removeNode(id);\n              }\n            }}\n            style={circleStyle(this.state.selectedId === id, x, y)}\n            onClick={(e) => {\n              if (e.shiftKey) {\n                this.addEdge(this.state.selectedId, id, 1);\n              } else {\n                this.selectNode(e, id);\n              }\n              this.forceUpdate();\n            }}\n            className={`Node${id}`}\n            id={`Node${id}`}\n          >\n            {id}\n          </div>\n        </Draggable>\n      ));\n\n      this.setState({ selectedId: id }, () => {\n        this.forceUpdate();\n      });\n    }\n    return this;\n  };\n\n  // remove node if it's in the graph\n  // no effect if node isn't in graph\n  removeNode = (id) => {\n    // remove from lists of neighbors\n    this.adjList.forEach((neighbors, node) => {\n      this.adjList.set(\n        node,\n        neighbors.filter((val) => val !== id)\n      );\n\n      // remove entry in adjacency list\n      this.adjList.delete(id);\n      this.nodeToElement.delete(id);\n    });\n    this.forceUpdate();\n    return this;\n  };\n\n  // props = {out: number, in: number, weight: number}\n  addEdge = (outNode, inNode, weight) => {\n    if (this.adjList.has(outNode) && this.adjList.has(inNode)) {\n      this.adjList.set(outNode, [\n        ...this.adjList.get(outNode).filter((obj) => obj.node !== inNode),\n        { node: inNode, weight: weight },\n      ]);\n      if (this.state.undirected) {\n        this.adjList.set(inNode, [\n          ...this.adjList.get(inNode).filter((obj) => obj.node !== outNode),\n          { node: outNode, weight: weight },\n        ]);\n      }\n      this.setState(\n        {\n          changed: true,\n          selectedId: inNode,\n        },\n        () => {\n          this.shouldComponentUpdate({\n            cleared: this.state.cleared,\n            selectedType: this.state.undirected ? \"undirected\" : \"directed\",\n            selectedWeight: this.state.unweighted ? \"unweighted\" : \"weighted\",\n            selectedAlgorithm: this.state.algorithm,\n          });\n        }\n      );\n    }\n    this.forceUpdate();\n    return this;\n  };\n\n  // props = {out: number, in: number}\n  removeEdge = (outNode, inNode) => {\n    if (this.adjList.has(outNode)) {\n      this.adjList.set(\n        outNode,\n        this.adjList.get(outNode).filter((obj) => obj.node !== inNode)\n      );\n      if (this.state.undirected) {\n        this.adjList.set(\n          inNode,\n          this.adjList.get(inNode).filter((obj) => obj.node !== outNode)\n        );\n      }\n    }\n    this.forceUpdate();\n    return this;\n  };\n\n  selectNode = (e, id) => {\n    this.setState(\n      {\n        selectedId: id,\n        selectedEdge: { a: -1, b: -1 },\n        changed: true,\n      },\n      () => {\n        this.shouldComponentUpdate({\n          cleared: this.state.cleared,\n          selectedType: this.state.undirected ? \"undirected\" : \"directed\",\n          selectedWeight: this.state.unweighted ? \"unweighted\" : \"weighted\",\n          selectedAlgorithm: this.state.algorithm,\n        });\n      }\n    );\n\n    this.forceUpdate();\n    e.stopPropagation();\n  };\n\n  render() {\n    const nodes = [];\n    const it = this.nodeToElement.values();\n    let res = it.next();\n    while (!res.done) {\n      nodes.push(res.value());\n      res = it.next();\n    }\n    const edges = [];\n    const drawnEdges = [];\n    this.adjList.forEach((neighbors, id) => {\n      neighbors.forEach((neighbor) => {\n        if (\n          !this.state.undirected ||\n          !drawnEdges.some(\n            ({ inNode, outNode }) => inNode === neighbor.node && outNode === id\n          )\n        ) {\n          drawnEdges.push({ inNode: id, outNode: neighbor.node });\n          edges.push(\n            <Xarrow\n              key={`Node${id}-Node${neighbor.node}`}\n              start={`Node${id}`}\n              end={`Node${neighbor.node}`}\n              label={!this.state.unweighted ? `${neighbor.weight}` : \"\"}\n              showHead={!this.state.undirected}\n              color={edgeColor(\n                this.state.selectedEdge.a === id &&\n                  this.state.selectedEdge.b === neighbor.node\n              )}\n              strokeWidth={5}\n              onClick={(e) => {\n                this.setState({\n                  selectedId: -1,\n                  selectedEdge: { a: id, b: neighbor.node },\n                });\n                e.stopPropagation();\n                this.forceUpdate();\n              }}\n              tabIndex=\"1\"\n              onKeyDown={(e) => {\n                if (e.key === \"Backspace\" || e.key === \"Delete\") {\n                  this.removeEdge(id, neighbor.node);\n                  this.setState({\n                    selectedEdge: { a: -1, b: -1 },\n                  });\n                } else if (e.key === \"Enter\") {\n                  this.removeEdge(id, neighbor.node);\n                  this.addEdge(id, neighbor.node, 0);\n                } else if (\n                  e.key === \"0\" ||\n                  e.key === \"1\" ||\n                  e.key === \"2\" ||\n                  e.key === \"3\" ||\n                  e.key === \"4\" ||\n                  e.key === \"5\" ||\n                  e.key === \"6\" ||\n                  e.key === \"7\" ||\n                  e.key === \"8\" ||\n                  e.key === \"9\"\n                ) {\n                  let edgeWeight = 1;\n                  this.adjList\n                    .get(id)\n                    .forEach(\n                      ({ node, weight }) =>\n                        (edgeWeight =\n                          node === neighbor.node ? weight : edgeWeight)\n                    );\n                  this.removeEdge(id, neighbor.node);\n                  this.addEdge(\n                    id,\n                    neighbor.node,\n                    edgeWeight * 10 + parseInt(e.key)\n                  );\n\n                  this.forceUpdate();\n                }\n                this.setState({ changed: true });\n              }}\n            />\n          );\n        }\n      });\n    });\n\n    const dottedEdges = [];\n    const drawnDottedEdges = [];\n    if (this.state.algorithm === \"triadic\") {\n      this.state.results.forEach(({ NodeA, NodeB }) => {\n        if (\n          !this.state.undirected ||\n          !drawnDottedEdges.some(\n            ({ inNode, outNode }) => inNode === NodeB && outNode === NodeA\n          )\n        ) {\n          drawnDottedEdges.push({ inNode: NodeA, outNode: NodeB });\n          dottedEdges.push(\n            <Xarrow\n              key={`Node${NodeA}-Node${NodeB}`}\n              start={`Node${NodeA}`}\n              end={`Node${NodeB}`}\n              label={\"\"}\n              showHead={!this.state.undirected}\n              color={\"#98ddca\"}\n              strokeWidth={5}\n              dashness={{ strokeLen: 10, nonStrokeLen: 10 }}\n            />\n          );\n        }\n      });\n    }\n\n    return (\n      <div\n        onClick={() => {\n          this.setState({\n            selectedId: -1,\n            selectedEdge: { a: -1, b: -1 },\n            //\n          });\n          this.forceUpdate();\n        }}\n        onDoubleClick={(e) => {\n          if (\n            this.state.selectedId < 0 &&\n            this.state.selectedEdge.a === -1 &&\n            this.state.selectedEdge.b === -1\n          ) {\n            this.addNode(e, this.state.nextId);\n            this.setState({\n              nextId: this.state.nextId + 1,\n              selectedEdge: { a: -1, b: -1 },\n            });\n            this.forceUpdate();\n          }\n        }}\n        className=\"canvas\"\n      >\n        <div className=\"graph\">\n          {dottedEdges}\n          {edges}\n          {nodes}\n        </div>\n        <Results result={this.state.results} algorithm={this.state.algorithm} />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}