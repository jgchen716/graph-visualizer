{"ast":null,"code":"var _jsxFileName = \"/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Toolbar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\"; // bottom toolbar for running algorithms, clearing graph, and viewing instructions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Toolbar = ({\n  selectedType,\n  setSelectedType,\n  selectedWeight,\n  setSelectedWeight,\n  setSelectedAlgorithm,\n  setCleared,\n  cleared\n}) => {\n  _s();\n\n  const instructionsText = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Double click to add a node. Single click to select a node or edge.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), \"After selecting a node, shift click on another node to add an edge.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), \"To delete a node or edge, select the node/edge and then hit the\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n      children: \"backspace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 33\n    }, this), \" key on your keyboard.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \"The default edge weight is 1. To change an edge weight, first press\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n      children: \"enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), \" to set the edge weight to 0. Then, type in any number to append the digits to the edge weight.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \"Also, note that for some algorithms (BFS, DFS, and Dijkstra), a node must be selected in order to run the algorithm. Once run, the algorithm's results will be displayed in the Results pane on the right side of the screen.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \"Hit save to save your favorite graph!\"]\n  }, void 0, true); // state for dialog box for instructions\n\n\n  const [open, setOpen] = useState(false); // open dialog\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }; // close dialog\n\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // disable buttons based on current graph specifications\n\n\n  const isDisabled = alg => {\n    if (alg === \"bfs\" || alg === \"dfs\" || alg === \"dijkstra\" || alg === \"clustering\") {\n      return false;\n    } else if (alg === \"bridges\") {\n      return selectedType !== \"undirected\";\n    } else if (alg === \"topo sort\") {\n      return selectedType !== \"directed\";\n    } else {\n      return false;\n    }\n  }; // manage radio button state\n\n\n  const handleChange = (e, type) => {\n    switch (type) {\n      case \"direction\":\n        setSelectedType(e.target.value);\n        break;\n\n      case \"weight\":\n        setSelectedWeight(e.target.value);\n        break;\n\n      default:\n        console.log(\"Invalid type\");\n        break;\n    }\n  }; // render toolbar\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleClickOpen,\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open,\n          onClose: handleClose,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Instructions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: instructionsText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClose,\n              color: \"primary\",\n              autoFocus: true,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: () => setSelectedAlgorithm(\"bfs\"),\n          disabled: isDisabled(\"bfs\"),\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"dfs\"),\n          disabled: isDisabled(\"dfs\"),\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"dijkstra\"),\n          disabled: isDisabled(\"dijkstra\"),\n          children: \"Dijkstra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"topo sort\"),\n          disabled: isDisabled(\"topo sort\"),\n          children: \"Topo Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"clustering\"),\n          disabled: isDisabled(\"clustering\"),\n          children: \"Clustering Coefficient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"bridges\"),\n          disabled: isDisabled(\"bridges\"),\n          children: \"Bridges\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: e => setSelectedAlgorithm(\"triadic\"),\n          disabled: isDisabled(\"triadic\"),\n          children: \"Triadic Closure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: () => {\n            setCleared(!cleared);\n            setSelectedAlgorithm(\"\");\n          },\n          children: \"CLEAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"success\",\n          onClick: () => {\n            // TODO: add save\n            setSelectedAlgorithm(\"\");\n          },\n          children: \"SAVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      component: \"fieldset\",\n      children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n        \"aria-label\": \"graph-type\",\n        name: \"controlled-radio-buttons-group\",\n        value: selectedType,\n        onChange: e => handleChange(e, \"direction\"),\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"undirected\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 22\n          }, this),\n          label: \"Undirected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"directed\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 22\n          }, this),\n          label: \"Directed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      component: \"fieldset\",\n      children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n        \"aria-label\": \"edge-type\",\n        name: \"controlled-radio-buttons-group\",\n        value: selectedWeight,\n        onChange: e => handleChange(e, \"weight\"),\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"unweighted\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 22\n          }, this),\n          label: \"Unweighted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"weighted\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 22\n          }, this),\n          label: \"Weighted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Toolbar, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = Toolbar;\nexport default Toolbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["/Users/jgchen/Desktop/Dev/graph-visualizer/src/components/Toolbar.jsx"],"names":["React","useState","Button","Radio","RadioGroup","FormControlLabel","FormControl","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Toolbar","selectedType","setSelectedType","selectedWeight","setSelectedWeight","setSelectedAlgorithm","setCleared","cleared","instructionsText","open","setOpen","handleClickOpen","handleClose","isDisabled","alg","handleChange","e","type","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// bottom toolbar for running algorithms, clearing graph, and viewing instructions\nconst Toolbar = ({\n  selectedType,\n  setSelectedType,\n  selectedWeight,\n  setSelectedWeight,\n  setSelectedAlgorithm,\n  setCleared,\n  cleared,\n}) => {\n  const instructionsText = (\n    <>\n      Double click to add a node. Single click to select a node or edge.\n      <br />\n      After selecting a node, shift click on another node to add an edge.\n      <br />\n      To delete a node or edge, select the node/edge and then hit the{\" \"}\n      <code>backspace</code> or <code>delete</code> key on your keyboard.\n      <br />\n      <br />\n      The default edge weight is 1. To change an edge weight, first press{\" \"}\n      <code>enter</code> to set the edge weight to 0. Then, type in any number\n      to append the digits to the edge weight.\n      <br />\n      <br />\n      Also, note that for some algorithms (BFS, DFS, and Dijkstra), a node must\n      be selected in order to run the algorithm. Once run, the algorithm's\n      results will be displayed in the Results pane on the right side of the\n      screen.\n      <br />\n      Hit save to save your favorite graph!\n    </>\n  );\n\n  // state for dialog box for instructions\n  const [open, setOpen] = useState(false);\n\n  // open dialog\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  // close dialog\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // disable buttons based on current graph specifications\n  const isDisabled = (alg) => {\n    if (\n      alg === \"bfs\" ||\n      alg === \"dfs\" ||\n      alg === \"dijkstra\" ||\n      alg === \"clustering\"\n    ) {\n      return false;\n    } else if (alg === \"bridges\") {\n      return selectedType !== \"undirected\";\n    } else if (alg === \"topo sort\") {\n      return selectedType !== \"directed\";\n    } else {\n      return false;\n    }\n  };\n\n  // manage radio button state\n  const handleChange = (e, type) => {\n    switch (type) {\n      case \"direction\":\n        setSelectedType(e.target.value);\n        break;\n      case \"weight\":\n        setSelectedWeight(e.target.value);\n        break;\n      default:\n        console.log(\"Invalid type\");\n        break;\n    }\n  };\n\n  // render toolbar\n  return (\n    <div className=\"toolbar\">\n      <div className=\"button-group\">\n        <div className=\"btn\">\n          <Button variant=\"contained\" onClick={handleClickOpen}>\n            Instructions\n          </Button>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">{\"Instructions\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                {instructionsText}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\n                Cancel\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={() => setSelectedAlgorithm(\"bfs\")}\n            disabled={isDisabled(\"bfs\")}\n          >\n            BFS\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"dfs\")}\n            disabled={isDisabled(\"dfs\")}\n          >\n            DFS\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"dijkstra\")}\n            disabled={isDisabled(\"dijkstra\")}\n          >\n            Dijkstra\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"topo sort\")}\n            disabled={isDisabled(\"topo sort\")}\n          >\n            Topo Sort\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"clustering\")}\n            disabled={isDisabled(\"clustering\")}\n          >\n            Clustering Coefficient\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"bridges\")}\n            disabled={isDisabled(\"bridges\")}\n          >\n            Bridges\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => setSelectedAlgorithm(\"triadic\")}\n            disabled={isDisabled(\"triadic\")}\n          >\n            Triadic Closure\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              setCleared(!cleared);\n              setSelectedAlgorithm(\"\");\n            }}\n          >\n            CLEAR\n          </Button>\n        </div>\n        <div className=\"btn\">\n          <Button\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => {\n              // TODO: add save\n              setSelectedAlgorithm(\"\");\n            }}\n          >\n            SAVE\n          </Button>\n        </div>\n      </div>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          aria-label=\"graph-type\"\n          name=\"controlled-radio-buttons-group\"\n          value={selectedType}\n          onChange={(e) => handleChange(e, \"direction\")}\n        >\n          <FormControlLabel\n            value=\"undirected\"\n            control={<Radio color=\"primary\" />}\n            label=\"Undirected\"\n          />\n          <FormControlLabel\n            value=\"directed\"\n            control={<Radio color=\"primary\" />}\n            label=\"Directed\"\n          />\n        </RadioGroup>\n      </FormControl>\n\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          aria-label=\"edge-type\"\n          name=\"controlled-radio-buttons-group\"\n          value={selectedWeight}\n          onChange={(e) => handleChange(e, \"weight\")}\n        >\n          <FormControlLabel\n            value=\"unweighted\"\n            control={<Radio color=\"primary\" />}\n            label=\"Unweighted\"\n          />\n          <FormControlLabel\n            value=\"weighted\"\n            control={<Radio color=\"primary\" />}\n            label=\"Weighted\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}