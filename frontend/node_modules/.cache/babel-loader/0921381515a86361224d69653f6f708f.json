{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nimport { getFormControlUtilityClasses } from './formControlClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst overridesResolver = ({\n  styleProps\n}, styles) => {\n  return deepmerge(_extends({}, styles[`margin${capitalize(styleProps.margin)}`], styleProps.fullWidth && styles.fullWidth), styles.root || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    margin,\n    fullWidth\n  } = styleProps;\n  const slots = {\n    root: ['root', `margin${capitalize(margin)}`, fullWidth && 'fullWidth']\n  };\n  return composeClasses(slots, getFormControlUtilityClasses, classes);\n};\n\nconst FormControlRoot = experimentalStyled('div', {}, {\n  name: 'MuiFormControl',\n  slot: 'Root',\n  overridesResolver\n})(({\n  styleProps\n}) => _extends({\n  display: 'inline-flex',\n  flexDirection: 'column',\n  position: 'relative',\n  // Reset fieldset default style.\n  minWidth: 0,\n  padding: 0,\n  margin: 0,\n  border: 0,\n  verticalAlign: 'top'\n}, styleProps.margin === 'normal' && {\n  marginTop: 16,\n  marginBottom: 8\n}, styleProps.margin === 'dense' && {\n  marginTop: 8,\n  marginBottom: 4\n}, styleProps.fullWidth && {\n  width: '100%'\n}));\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n */\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControl'\n  });\n\n  const {\n    children,\n    className,\n    color = 'primary',\n    component = 'div',\n    disabled = false,\n    error = false,\n    focused: visuallyFocused,\n    fullWidth = false,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size = 'medium',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"focused\", \"fullWidth\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  const styleProps = _extends({}, props, {\n    color,\n    component,\n    disabled,\n    error,\n    fullWidth,\n    hiddenLabel,\n    margin,\n    required,\n    size,\n    variant\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  });\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n  const [focusedState, setFocused] = React.useState(false);\n\n  if (disabled && focusedState) {\n    setFocused(false);\n  }\n\n  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;\n  let registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    size,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant\n  };\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(FormControlRoot, _extends({\n      as: component,\n      styleProps: styleProps,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default FormControl;","map":{"version":3,"sources":["/Users/jgchen/Desktop/Dev/graph-visualizer/node_modules/@material-ui/core/FormControl/FormControl.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","deepmerge","unstable_composeClasses","composeClasses","useThemeProps","experimentalStyled","isFilled","isAdornedStart","capitalize","isMuiElement","FormControlContext","getFormControlUtilityClasses","jsx","_jsx","overridesResolver","styleProps","styles","margin","fullWidth","root","useUtilityClasses","classes","slots","FormControlRoot","name","slot","display","flexDirection","position","minWidth","padding","border","verticalAlign","marginTop","marginBottom","width","FormControl","forwardRef","inProps","ref","props","children","className","color","component","disabled","error","focused","visuallyFocused","hiddenLabel","required","size","variant","other","adornedStart","setAdornedStart","useState","initialAdornedStart","Children","forEach","child","input","filled","setFilled","initialFilled","focusedState","setFocused","undefined","registerEffect","process","env","NODE_ENV","registeredInput","useRef","current","console","join","onFilled","useCallback","onEmpty","childContext","onBlur","onFocus","Provider","value","as","propTypes","node","object","string","oneOfType","oneOf","elementType","bool","sx"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nimport { getFormControlUtilityClasses } from './formControlClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst overridesResolver = ({\n  styleProps\n}, styles) => {\n  return deepmerge(_extends({}, styles[`margin${capitalize(styleProps.margin)}`], styleProps.fullWidth && styles.fullWidth), styles.root || {});\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    margin,\n    fullWidth\n  } = styleProps;\n  const slots = {\n    root: ['root', `margin${capitalize(margin)}`, fullWidth && 'fullWidth']\n  };\n  return composeClasses(slots, getFormControlUtilityClasses, classes);\n};\n\nconst FormControlRoot = experimentalStyled('div', {}, {\n  name: 'MuiFormControl',\n  slot: 'Root',\n  overridesResolver\n})(({\n  styleProps\n}) => _extends({\n  display: 'inline-flex',\n  flexDirection: 'column',\n  position: 'relative',\n  // Reset fieldset default style.\n  minWidth: 0,\n  padding: 0,\n  margin: 0,\n  border: 0,\n  verticalAlign: 'top'\n}, styleProps.margin === 'normal' && {\n  marginTop: 16,\n  marginBottom: 8\n}, styleProps.margin === 'dense' && {\n  marginTop: 8,\n  marginBottom: 4\n}, styleProps.fullWidth && {\n  width: '100%'\n}));\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n */\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormControl'\n  });\n\n  const {\n    children,\n    className,\n    color = 'primary',\n    component = 'div',\n    disabled = false,\n    error = false,\n    focused: visuallyFocused,\n    fullWidth = false,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size = 'medium',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"focused\", \"fullWidth\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  const styleProps = _extends({}, props, {\n    color,\n    component,\n    disabled,\n    error,\n    fullWidth,\n    hiddenLabel,\n    margin,\n    required,\n    size,\n    variant\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  });\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n  const [focusedState, setFocused] = React.useState(false);\n\n  if (disabled && focusedState) {\n    setFocused(false);\n  }\n\n  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;\n  let registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    size,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant\n  };\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(FormControlRoot, _extends({\n      as: component,\n      styleProps: styleProps,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['primary', 'secondary']), PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default FormControl;"]},"metadata":{},"sourceType":"module"}