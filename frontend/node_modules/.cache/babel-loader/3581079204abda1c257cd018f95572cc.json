{"ast":null,"code":"\"use strict\"; // Buzier curve calculations\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buzzierMinSols = exports.bzFunction = void 0;\n/**\r\n * returns buzzier curve function with 2 controls points\r\n * bzCurve with 2 control points function(4 points total):  bz = (1−t)^3*p1 + 3(1−t)^2*t*p2 +3(1−t)*t^2*p3 + t^3*p4\r\n */\n\nexports.bzFunction = (p1, p2, p3, p4) => t => Math.pow(1 - t, 3) * p1 + 3 * Math.pow(1 - t, 2) * t * p2 + 3 * (1 - t) * Math.pow(t, 2) * p3 + Math.pow(t, 3) * p4;\n/**\r\n * returns 2 solutions from extram points for buzzier curve with 2 controls points\r\n */\n\n\nexports.buzzierMinSols = (p1, p2, p3, p4) => {\n  const bz = exports.bzFunction(p1, p2, p3, p4); // dt(bz) = -3 p1 (1 - t)^2 + 3 p2 (1 - t)^2 - 6 p2 (1 - t) t + 6 p3 (1 - t) t - 3 p3 t^2 + 3 p4 t^2\n  // when p1=(x1,y1),p2=(cpx1,cpy1),p3=(cpx2,cpy2),p4=(x2,y2)\n  // then extrema points is when dt(bz) = 0\n  // solutions =>  t = ((-6 p1 + 12 p2 - 6 p3) ± sqrt((6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)))/(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4))  when (p1 + 3 p3!=3 p2 + p4)\n  // if we mark A=(-6 p1 + 12 p2 - 6 p3) and B=(6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)) and C =(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4) then\n  // tSol = A ± sqrt(B)\n  // then solution we want is: bz(tSol)\n\n  const A = -6 * p1 + 12 * p2 - 6 * p3;\n  const B = Math.pow(-6 * p1 + 12 * p2 - 6 * p3, 2) - 4 * (3 * p2 - 3 * p1) * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\n  const C = 2 * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\n  const sol1 = bz((A + Math.sqrt(B)) / C);\n  const sol2 = bz((A - Math.sqrt(B)) / C);\n  return [sol1, sol2];\n};","map":{"version":3,"sources":["../../src/utils/buzzier.js"],"names":[],"mappings":"cAAA;;;;;;AAEA;;;AAGG;;AACU,OAAA,CAAA,UAAA,GAAa,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,KAAqB,CAAD,IAC5C,IAAA,CAAA,GAAA,CAAC,IAAI,CAAL,EAAW,CAAX,IAAe,EAAf,GACA,IAAI,IAAA,CAAA,GAAA,CAAC,IAAI,CAAL,EAAW,CAAX,CAAJ,GAAmB,CAAnB,GAAuB,EADvB,GAEA,KAAK,IAAI,CAAT,IAAc,IAAA,CAAA,GAAA,CAAA,CAAA,EAAK,CAAL,CAAd,GAAuB,EAFvB,GAGA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAK,CAAL,IAAS,EAJE;AAMb;;AAEG;;;AACU,OAAA,CAAA,cAAA,GAAiB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,KAAmB;AAC/C,QAAM,EAAE,GAAG,OAAA,CAAA,UAAA,CAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,CAAX,CAD+C,CAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAM,CAAC,GAAG,CAAC,CAAD,GAAK,EAAL,GAAU,KAAK,EAAf,GAAoB,IAAI,EAAlC;AACA,QAAM,CAAC,GACL,IAAA,CAAA,GAAA,CAAC,CAAC,CAAD,GAAK,EAAL,GAAU,KAAK,EAAf,GAAoB,IAAI,EAAzB,EAAgC,CAAhC,IACA,KAAK,IAAI,EAAJ,GAAS,IAAI,EAAlB,KAAyB,CAAC,CAAD,GAAK,EAAL,GAAU,IAAI,EAAd,GAAmB,IAAI,EAAvB,GAA4B,IAAI,EAAzD,CAFF;AAGA,QAAM,CAAC,GAAG,KAAK,CAAC,CAAD,GAAK,EAAL,GAAU,IAAI,EAAd,GAAmB,IAAI,EAAvB,GAA4B,IAAI,EAArC,CAAV;AAEA,QAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV,CAAL,IAAqB,CAAtB,CAAf;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,CAAV,CAAL,IAAqB,CAAtB,CAAf;AACA,SAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACD,CAlBY","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Buzier curve calculations\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.buzzierMinSols = exports.bzFunction = void 0;\r\n/**\r\n * returns buzzier curve function with 2 controls points\r\n * bzCurve with 2 control points function(4 points total):  bz = (1−t)^3*p1 + 3(1−t)^2*t*p2 +3(1−t)*t^2*p3 + t^3*p4\r\n */\r\nexports.bzFunction = (p1, p2, p3, p4) => (t) => Math.pow((1 - t), 3) * p1 +\r\n    3 * Math.pow((1 - t), 2) * t * p2 +\r\n    3 * (1 - t) * Math.pow(t, 2) * p3 +\r\n    Math.pow(t, 3) * p4;\r\n/**\r\n * returns 2 solutions from extram points for buzzier curve with 2 controls points\r\n */\r\nexports.buzzierMinSols = (p1, p2, p3, p4) => {\r\n    const bz = exports.bzFunction(p1, p2, p3, p4);\r\n    // dt(bz) = -3 p1 (1 - t)^2 + 3 p2 (1 - t)^2 - 6 p2 (1 - t) t + 6 p3 (1 - t) t - 3 p3 t^2 + 3 p4 t^2\r\n    // when p1=(x1,y1),p2=(cpx1,cpy1),p3=(cpx2,cpy2),p4=(x2,y2)\r\n    // then extrema points is when dt(bz) = 0\r\n    // solutions =>  t = ((-6 p1 + 12 p2 - 6 p3) ± sqrt((6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)))/(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4))  when (p1 + 3 p3!=3 p2 + p4)\r\n    // if we mark A=(-6 p1 + 12 p2 - 6 p3) and B=(6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)) and C =(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4) then\r\n    // tSol = A ± sqrt(B)\r\n    // then solution we want is: bz(tSol)\r\n    const A = -6 * p1 + 12 * p2 - 6 * p3;\r\n    const B = Math.pow((-6 * p1 + 12 * p2 - 6 * p3), 2) -\r\n        4 * (3 * p2 - 3 * p1) * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\r\n    const C = 2 * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\r\n    const sol1 = bz((A + Math.sqrt(B)) / C);\r\n    const sol2 = bz((A - Math.sqrt(B)) / C);\r\n    return [sol1, sol2];\r\n};\r\n//# sourceMappingURL=buzzier.js.map"]},"metadata":{},"sourceType":"script"}